Consider models A and B describing PetLoverTypeD and PerLoverTypeF,
each represented in 3 equivalent formalisms (TTL | Rector | Warren)
and answer question 7 below.
Model A: PetLoverTypeD
TTL:
# –––––––––––––- Class 0––––––––––––-
:PetLoverTypeD rdf:type owl:Class;
rdfs:subClassOf [ rdf:type owl:Restriction ;
owl:onProperty :hasPet;
owl:someValuesFrom :not_Dog
];
rdfs:label "PetLoverTypeD"@en .
# –––––––––––––- Class 1––––––––––––-
:not_Dog rdf:type owl:Class;
rdfs:label "not Dog"@en .
Rector: PetLoverTypeD has, amongst other things, some pets that are
not Dogs.
Warren: PetLoverTypeD has, amongst other things, at least one pet
that is not a Dog.
Model B: PerLoverTypeF
TTL:
# –––––––––––––- Class 0––––––––––––-
:PetLoverTypeF rdf:type owl:Class;
rdfs:subClassOf [ rdf:type owl:Restriction ;
owl:onProperty :hasPet;
owl:allValuesFrom :Dog
];
rdfs:label "PetLoverTypeF"@en .
# –––––––––––––- Class 1––––––––––––-
:Dog rdf:type owl:Class;
rdfs:label "Dog"@en .
Rector: PetLoverTypeF has, amongst other things, only Dog pets.
Warren: PetLoverTypeF has, amongst other things, no other than Dog
pets.
Question 7. Is it true that PetLoverTypeD is disjoint to
PetLoverTypeF? That is, there can be no instance that is at the
same time of type PetLoverTypeD and PetLoverTypeF.
a) Yes
b) No